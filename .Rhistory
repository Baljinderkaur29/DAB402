summary(heart_data)
# glm generalized linear regression
glm_reg <- glm(FastingBS ~ Age, data = heart_dataset, family = "binomial")
glm_reg
range(heart_dataset$Age)
x_axis <- seq(min(range(heart_dataset$Age)), max(range(heart_dataset$Age)),3)
x_axis
y_axis <- predict(glm_reg, list(Age=x_axis),type = "response")
y_axis
plot(heart_dataset$Age,heart_dataset$FastingBS)
plot(x_axis,y_axis)
lines(x_axis,y_axis)
nrow(heart_dataset)
head(heart_dataset)
set.seed(17)
heart_train_data_index<- sample(1:nrow(heart_dataset),0.6*nrow(heart_dataset))
heart_training.set <- heart_dataset[heart_train_data_index,-c(2,7,9,11)]
head(heart_training.set)
heart_test.set <- heart_dataset[-heart_train_data_index,-c(2,7,9,11)]
head(heart_test.set)
install.packages('class')
library("class")
install.packages("gmodels")
library("gmodels")
install.packages("cvms")
library(cvms)
library(tibble)
knn_indep_train_set =heart_training.set[-2] # remove target variable from dataset
knn_indep_train_set
knn_indep_test_set = heart_test.set[-2]
knn_indep_test_set
knn_target_train_set = heart_training.set$ChestPainType
head(knn_target_train_set)
knn_target_test_set = heart_test.set$ChestPainType
head(knn_target_test_set)
knn_pred_target_test_set = knn(knn_indep_train_set,knn_indep_test_set, knn_target_train_set,k=5)
knn_pred_target_test_set
cnfMtrx <- table(knn_pred_target_test_set,knn_target_test_set)
cnfMtrx
plot_confusion_matrix(as_tibble(cnfMtrx),target_col = "knn_target_test_set",
prediction_col = "knn_pred_target_test_set",
counts_col = "n")
chestPainAccuracy <- sum(diag(cnfMtrx))/sum(cnfMtrx)
chestPainAccuracy
#Predict Gender
set.seed(17)
heart_train_data_index1<- sample(1:nrow(heart_dataset),0.6*nrow(heart_dataset))
head(heart_train_data_index1)
heart_training.set1 <- heart_dataset[heart_train_data_index1,-c(3,7,9,11)]
head(heart_training.set1)
heart_test.set1 <- heart_dataset[-heart_train_data_index1,-c(3,7,9,11)]
head(heart_test.set1)
knn_indep_train_set1 =heart_training.set1[-2] # remove target variable from dataset
knn_indep_train_set1
knn_indep_test_set1 = heart_test.set1[-2]
knn_indep_test_set1
knn_target_train_set1 = heart_training.set1$Sex
head(knn_target_train_set1)
knn_target_test_set1 = heart_test.set1$Sex
head(knn_target_test_set1)
knn_pred_target_test_set1 = knn(knn_indep_train_set1,knn_indep_test_set1, knn_target_train_set1,k=3)
knn_pred_target_test_set1
mtrx <- table(knn_pred_target_test_set1,knn_target_test_set1)
mtrx
plot_confusion_matrix(as_tibble(mtrx),target_col = "knn_target_test_set1",
prediction_col = "knn_pred_target_test_set1",
counts_col = "n")
genderAccuracy <- sum(diag(mtrx))/sum(mtrx)
genderAccuracy
install.packages("party")
library("sandwich")
library("party")
#Error in trafo(data = data, numeric_trafo = numeric_trafo, factor_trafo = factor_trafo, : data class “character” is not supported
heart_training.set$ChestPainType <- as.factor(heart_training.set$ChestPainType)
head(heart_training.set)
heart_training_ctree_model <- ctree(ChestPainType ~ ., data = heart_training.set)
heart_training_ctree_model
plot(heart_training_ctree_model, type="simple")
randomForest<-accuracy<-sum(diag(randomForest_matrix))/sum(randomForest_matrix)
install.packages("party")
install.packages("party")
install.packages("party")
heart_dataset$HeartDisease <- as.factor(heart_dataset$HeartDisease)
heart_output_forest <- randomForest(HeartDisease ~.,data=heart_dataset)
heart_dataset <- read.csv("C:/Users/16478/Downloads/capstoneProject_Group9/capstoneProject/heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset
View(heart_dataset)
heart_dataset <- read.csv("C:/Users/16478/Downloads/capstoneProject_Group9/capstoneProject/heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset
View(heart_dataset)
sapply(heart_dataset,class)
#mean(heart_dataset$Cholesterol)
summary(heart_dataset)
head(heart_dataset)
sum(is.na(heart_dataset))
which(is.na(heart_dataset))
hist(heart_dataset$RestingBP,main="HIstogram to show RestingBP",xlab="Blood pressure In mm or Hg",xlim=c(50,200),col="skyblue")
hist(heart_dataset$MaxHR, main="HIstogram to show Max Heart Rate",xlab="Heart Rate Value",xlim=c(60,202),col=c("pink","grey","skyblue"))
counts <- table(heart_dataset$HeartDisease, heart_dataset$Sex)
barplot(counts, main="Haert Disease between Males and Females",
xlab="Gender", col=c("grey","skyblue"),
legend = rownames(counts), beside=TRUE, width = c(0.5,0.5))
counts <- table(heart_dataset$HeartDisease, heart_dataset$ChestPainType)
barplot(counts, main="Heart Disease based on Chest Pain Type",
xlab="Chest Pain Type", col=c("pink","skyblue"),
legend = rownames(counts), beside=TRUE, width = c(0.5,0.5))
subset <- heart_dataset [,c("HeartDisease", "RestingBP", "Cholesterol","FastingBS", "MaxHR")]
plot(subset)
cor(subset)
heatmap(cor(subset), col = c("#cccccc","#eeeeee","#d7d7d7","#00FF00","#000000"), margins=c(3,5))
#is MaxHR is really playing a good role in RestingBP ??
modelBP <- lm(RestingBP ~ MaxHR, data = subset)
summary(modelBP)
heart_data <- lm(HeartDisease~ RestingBP+Cholesterol+FastingBS+MaxHR,data = subset)
summary(heart_data)
# glm generalized linear regression
glm_reg <- glm(FastingBS ~ Age, data = heart_dataset, family = "binomial")
glm_reg
range(heart_dataset$Age)
x_axis <- seq(min(range(heart_dataset$Age)), max(range(heart_dataset$Age)),3)
x_axis
y_axis <- predict(glm_reg, list(Age=x_axis),type = "response")
y_axis
plot(heart_dataset$Age,heart_dataset$FastingBS)
plot(x_axis,y_axis)
lines(x_axis,y_axis)
nrow(heart_dataset)
head(heart_dataset)
set.seed(17)
heart_train_data_index<- sample(1:nrow(heart_dataset),0.6*nrow(heart_dataset))
heart_training.set <- heart_dataset[heart_train_data_index,-c(2,7,9,11)]
head(heart_training.set)
heart_test.set <- heart_dataset[-heart_train_data_index,-c(2,7,9,11)]
head(heart_test.set)
install.packages('class')
library("class")
install.packages("gmodels")
library("gmodels")
install.packages("cvms")
library(cvms)
library(tibble)
knn_indep_train_set =heart_training.set[-2] # remove target variable from dataset
knn_indep_train_set
knn_indep_test_set = heart_test.set[-2]
knn_indep_test_set
knn_target_train_set = heart_training.set$ChestPainType
head(knn_target_train_set)
knn_target_test_set = heart_test.set$ChestPainType
head(knn_target_test_set)
knn_pred_target_test_set = knn(knn_indep_train_set,knn_indep_test_set, knn_target_train_set,k=5)
knn_pred_target_test_set
cnfMtrx <- table(knn_pred_target_test_set,knn_target_test_set)
cnfMtrx
plot_confusion_matrix(as_tibble(cnfMtrx),target_col = "knn_target_test_set",
prediction_col = "knn_pred_target_test_set",
counts_col = "n")
chestPainAccuracy <- sum(diag(cnfMtrx))/sum(cnfMtrx)
chestPainAccuracy
#Predict Gender
set.seed(17)
heart_train_data_index1<- sample(1:nrow(heart_dataset),0.6*nrow(heart_dataset))
head(heart_train_data_index1)
heart_training.set1 <- heart_dataset[heart_train_data_index1,-c(3,7,9,11)]
head(heart_training.set1)
heart_test.set1 <- heart_dataset[-heart_train_data_index1,-c(3,7,9,11)]
head(heart_test.set1)
knn_indep_train_set1 =heart_training.set1[-2] # remove target variable from dataset
knn_indep_train_set1
knn_indep_test_set1 = heart_test.set1[-2]
knn_indep_test_set1
knn_target_train_set1 = heart_training.set1$Sex
head(knn_target_train_set1)
knn_target_test_set1 = heart_test.set1$Sex
head(knn_target_test_set1)
knn_pred_target_test_set1 = knn(knn_indep_train_set1,knn_indep_test_set1, knn_target_train_set1,k=3)
knn_pred_target_test_set1
mtrx <- table(knn_pred_target_test_set1,knn_target_test_set1)
mtrx
plot_confusion_matrix(as_tibble(mtrx),target_col = "knn_target_test_set1",
prediction_col = "knn_pred_target_test_set1",
counts_col = "n")
genderAccuracy <- sum(diag(mtrx))/sum(mtrx)
genderAccuracy
install.packages("party")
library("sandwich")
library("party")
#Error in trafo(data = data, numeric_trafo = numeric_trafo, factor_trafo = factor_trafo, : data class “character” is not supported
heart_training.set$ChestPainType <- as.factor(heart_training.set$ChestPainType)
head(heart_training.set)
heart_training_ctree_model <- ctree(ChestPainType ~ ., data = heart_training.set)
heart_training_ctree_model
plot(heart_training_ctree_model, type="simple")
install.packages("party")
install.packages("party")
install.packages("party")
#Error in trafo(data = data, numeric_trafo = numeric_trafo, factor_trafo = factor_trafo, : data class “character” is not supported
heart_training.set$ChestPainType <- as.factor(heart_training.set$ChestPainType)
head(heart_training.set)
heart_training_ctree_model <- ctree(ChestPainType ~ ., data = heart_training.set)
resultRec1 = rectangleAP(40,5)
def<-resultRec1 = rectangleAP(40,5)
def rectangleAP(length,width):
def rectangleAP(length,width):
def rectangleAP(length,width):
def rectangleAP(length,width):
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
##Delete the commas in sodium and Potassium records and assign sodium and Potas as Numeric data types
Merged_data$Sodium <-  gsub(",","",Merged_data$Sodium)
##Delete the commas in sodium and Potassium records and assign sodium and Potas as Numeric data types
Merge_data$Sodium <-  gsub(",","",Merge_data$Sodium)
##Delete the commas in sodium and Potassium records and assign sodium and Potas as Numeric data types
merge$Sodium <-  gsub(",","",Merge$Sodium)
df<-data.frame(A=rnorm(1000, mean=10,sd=3),
(B=rnorm(1000, mean=10,sd=3),
df<-data.frame(A=rnorm(1000, mean=10,sd=3),
(B=rnorm(1000, mean=10,sd=3),
df<-data.frame(A=rnorm(1000, mean=10,sd=3),
(B=rnorm(1000, mean=10,sd=3),
data1 <- read.csv("C:/Users/16478/Downloads/USDA_Macronutrients.csv",stringsAsFactors = FALSE,header = TRUE,sep = ",")
str(data1)
data2 <- read.csv("C:/Users/16478/Downloads/USDA_Macronutrients.csv",stringsAsFactors = FALSE, header = TRUE,sep = ",")
cat(str(data2))
head(data1)
head(data2)
Merged_data <- merge(data1, data2, by="ID")
head(Merged_data)
sapply(Merged_data,class)
sapply(Merged_data,head)
##Delete the commas in sodium and Potassium records and assign sodium and Potas as Numeric data types
Merged_data$Sodium <-  gsub(",","",Merged_data$Sodium)
##Remove records having missing values for more than 4 attributes
Merged_data <- Merged_data[rowSums(is.na(Merged_data)) < 5,]
nrow(Merged_data)
## For records for missing values for Sugar, Vatiamin E and VitD, replace misisng values of these attributes with their means
Mean_sugar <- mean(Merged_data$Sugar, na.rm = TRUE)
Mean_vitD <- mean(Merged_data$VitaminD, na.rm = TRUE)
Mean_VitE <- mean(Merged_data$VitaminE, na.rm = TRUE)
Merged_data$Sugar[is.na(Merged_data$Sugar)] <- Mean_sugar
## With the single line code remove all remaining records with missing values and name the new dataset as USDAclean.
USDAclean <- na.omit(Merged_data)  ## DOn't perform this at intial stage of data cleaning.
sum(is.na(USDAclean))  ## This shows that data set is consistent
str(USDAclean)
boxplot(USDAclean$TotalFat,outline = FALSE)
boxplot(USDAclean$TotalFat,outline = FALSE)
data1 <- read.csv("C:/Users/16478/Downloads/USDA_Macronutrients.csv",stringsAsFactors = FALSE,header = TRUE,sep = ",")
str(data1)
data2 <- read.csv("C:/Users/16478/Downloads/USDA_Macronutrients.csv",stringsAsFactors = FALSE, header = TRUE,sep = ",")
cat(str(data2))
head(data1)
head(data2)
Merged_data <- merge(data1, data2, by="ID")
head(Merged_data)
sapply(Merged_data,class)
sapply(Merged_data,head)
##Delete the commas in sodium and Potassium records and assign sodium and Potas as Numeric data types
Merged_data$Sodium <-  gsub(",","",Merged_data$Sodium)
USDAclean <-na.omit(data)
sum(is.na(USDAclean))
nrow(USDAclean)
str(USDAclean)
USDAclean
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset
View(heart_dataset)
# For decision tree
install.packages("party")
library("sandwich")
library("party")
# For colorpanel
install.packages("gplots")
library("gplots")
# For KNN Model
install.packages('class')
library("class")
install.packages("gmodels")
library("gdata")
library("gmodels")
# For plot confusion matrix
install.packages("cvms")
library(cvms)
library(tibble)
# For random Forest
install.packages("randomForest")
library(randomForest)
# For Feature selection
install.packages("MASS")
install.packages("leaps")
sapply(heart_dataset,class)
summary(heart_dataset)
sum(is.na(heart_dataset))
head(heart_dataset)
sum(is.na(heart_dataset))
which(is.na(heart_dataset))
boxplot(heart_dataset$Age,horizontal = TRUE)
boxplot(heart_dataset$RestingBP,horizontal = TRUE)
boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
nrow(heart_dataset)
Q1_RestingBP <- quantile(heart_dataset$RestingBP, .25)
Q3_RestingBP <- quantile(heart_dataset$RestingBP, .75)
IQR_RestingBP <- IQR(heart_dataset$RestingBP)
heart_dataset$Outlier <- (heart_dataset$RestingBP < (Q1_RestingBP - 1.5*IQR_RestingBP) | heart_dataset$RestingBP > (Q3_RestingBP + 1.5*IQR_RestingBP))
avg = mean(heart_dataset$RestingBP[!heart_dataset$Outlier])
heart_dataset$RestingBP[heart_dataset$Outlier] = avg
#heart_dataset <- subset(heart_dataset, heart_dataset$RestingBP > (Q1_RestingBP - 1.5*IQR_RestingBP) & heart_dataset$RestingBP< (Q3_RestingBP + 1.5*IQR_RestingBP))
boxplot(heart_dataset$RestingBP,horizontal = TRUE)
nrow(heart_dataset)
Q1_Cholesterol <- quantile(heart_dataset$Cholesterol, .25)
Q3_Cholesterol <- quantile(heart_dataset$Cholesterol, .75)
IQR_Cholesterol <- IQR(heart_dataset$Cholesterol)
IQR_Cholesterol
#heart_dataset$Outlier1 <- (heart_dataset$Cholesterol < (Q1_Cholesterol - 1.5*IQR_Cholesterol) | heart_dataset$Cholesterol > (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#avg1 = mean(heart_dataset$Cholesterol[!heart_dataset$Outlier1])
#heart_dataset$Cholesterol[heart_dataset$Outlier1] = avg1
heart_dataset <- subset(heart_dataset, heart_dataset$Cholesterol> (Q1_Cholesterol - 1.5*IQR_Cholesterol) & heart_dataset$Cholesterol< (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
nrow(heart_dataset)
Q1_MaxHR <- quantile(heart_dataset$MaxHR, .25)
Q3_MaxHR <- quantile(heart_dataset$MaxHR, .75)
IQR_MaxHR <- IQR(heart_dataset$MaxHR)
IQR_MaxHR
#heart_dataset <- subset(heart_dataset, heart_dataset$MaxHR> (Q1_MaxHR - 1.5*IQR_MaxHR) & heart_dataset$MaxHR< (Q3_MaxHR + 1.5*IQR_MaxHR))
heart_dataset$Outlier <- (heart_dataset$MaxHR < (Q1_MaxHR - 1.5*IQR_MaxHR) | heart_dataset$MaxHR > (Q3_MaxHR + 1.5*IQR_MaxHR))
avg = mean(heart_dataset$MaxHR[!heart_dataset$Outlier])
heart_dataset$MaxHR[heart_dataset$Outlier] = avg
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
#heart_dataset <- subset(heart_dataset, heart_dataset$Oldpeak> (Q1_Oldpeak - 1.5*IQR_Oldpeak) & heart_dataset$Oldpeak< (Q3_Oldpeak + 1.5*IQR_Oldpeak))
heart_dataset$Outlier <- (heart_dataset$Oldpeak < (Q1_Oldpeak - 1.5*IQR_Oldpeak) | heart_dataset$Oldpeak > (Q3_Oldpeak + 1.5*IQR_Oldpeak))
avg = mean(heart_dataset$Oldpeak[!heart_dataset$Outlier])
heart_dataset$Oldpeak[heart_dataset$Outlier] = avg
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
nrow(heart_dataset)
hist(heart_dataset$RestingBP,main="HIstogram to show RestingBP",xlab="Blood pressure In mm or Hg",xlim=c(80,180),col="skyblue")
hist(heart_dataset$MaxHR, main="HIstogram to show Max Heart Rate",xlab="Heart Rate Value",xlim=c(60,202),col=c("pink","grey","skyblue"))
hist(heart_dataset$Cholesterol, main="HIstogram to show Cholesterol Level",xlab="Cholesterol Value")
counts <- table(heart_dataset$HeartDisease, heart_dataset$Sex)
counts
barplot(counts, main="Haert Disease between Males and Females",
xlab="Gender", col=c("grey","skyblue"),
legend = rownames(counts), beside=TRUE, width = c(0.5,0.5))
counts_chestpain <- table(heart_dataset$HeartDisease, heart_dataset$ChestPainType)
counts_chestpain
barplot(counts_chestpain, main="Heart Disease based on Chest Pain Type",
xlab="Chest Pain Type", col=c("pink","skyblue"),
legend = rownames(counts_chestpain), beside=TRUE, width = c(0.5,0.5))
subset <- heart_dataset [,c("HeartDisease", "RestingBP", "Cholesterol","FastingBS", "MaxHR", "Oldpeak")]
plot(subset)
cor(subset)
heatmap(cor(subset), col = redblue(100), margins=c(8,6))
modelBP <- lm(RestingBP ~ MaxHR, data = subset)
summary(modelBP)
Ch_modelBP <- lm(RestingBP ~ Cholesterol, data = subset)
summary(Ch_modelBP)
Bs_modelBP <- lm(RestingBP ~ FastingBS, data = subset)
summary(Bs_modelBP)
# glm generalized linear regression
glm_reg <- glm(HeartDisease ~ Age, data = heart_dataset, family = "binomial")
glm_reg
range(heart_dataset$Age)
x_axis <- seq(min(range(heart_dataset$Age)), max(range(heart_dataset$Age)),3)
x_axis
y_axis <- predict(glm_reg, list(Age=x_axis),type = "response")
y_axis
plot(heart_dataset$Age,heart_dataset$HeartDisease)
plot(x_axis,y_axis)
lines(x_axis,y_axis)
set.seed(17)
heart_train_data_index<- sample(1:nrow(heart_dataset),0.6*nrow(heart_dataset))
heart_training.set <- heart_dataset[heart_train_data_index,-c(2,7,9,11)]
head(heart_training.set)
heart_test.set <- heart_dataset[-heart_train_data_index,-c(2,7,9,11)]
head(heart_test.set)
knn_indep_train_set =heart_training.set[-2] # remove target variable from dataset
knn_indep_train_set
knn_indep_test_set = heart_test.set[-2]
knn_indep_test_set
knn_target_train_set = heart_training.set$ChestPainType
head(knn_target_train_set)
knn_target_test_set = heart_test.set$ChestPainType
head(knn_target_test_set)
knn_pred_target_test_set = knn(knn_indep_train_set,knn_indep_test_set, knn_target_train_set,k=5)
#Error in trafo(data = data, numeric_trafo = numeric_trafo, factor_trafo = factor_trafo, : data class “character” is not supported
heart_training.set$ChestPainType <- as.factor(heart_training.set$ChestPainType)
head(heart_training.set)
heart_training_ctree_model <- ctree(ChestPainType ~ ., data = heart_training.set)
heart_ctree_prediction <- predict(heart_training_ctree_model,heart_test.set)
ctreeMtrx <- table(heart_ctree_prediction,heart_test.set$ChestPainType)
random_forest_chestPain<-randomForest(ChestPainType~.,data=heart_training.set)
Model <- c('KNN','Decision Tree','Random Forest')
Accuracy <- c(genderAccuracy, ctreeAccuracyGender , random_forest_accuracy_gender)
random_forest_gender<-randomForest(Sex~.,data=heart_training.set1)
heart_ctree_prediction <- predict(heart_training_ctree_model,heart_test.set)
ctreeMtrx <- table(heart_ctree_prediction,heart_test.set$ChestPainType)
nrow(heart_dataset)
Q1_Cholesterol <- quantile(heart_dataset$Cholesterol, .25)
Q3_Cholesterol <- quantile(heart_dataset$Cholesterol, .75)
IQR_Cholesterol <- IQR(heart_dataset$Cholesterol)
IQR_Cholesterol
#heart_dataset$Outlier1 <- (heart_dataset$Cholesterol < (Q1_Cholesterol - 1.5*IQR_Cholesterol) | heart_dataset$Cholesterol > (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#avg1 = mean(heart_dataset$Cholesterol[!heart_dataset$Outlier1])
#heart_dataset$Cholesterol[heart_dataset$Outlier1] = avg1
heart_dataset <- subset(heart_dataset, heart_dataset$Cholesterol> (Q1_Cholesterol - 1.5*IQR_Cholesterol) & heart_dataset$Cholesterol< (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
nrow(heart_dataset)
Q1_MaxHR <- quantile(heart_dataset$MaxHR, .25)
Q3_MaxHR <- quantile(heart_dataset$MaxHR, .75)
IQR_MaxHR <- IQR(heart_dataset$MaxHR)
IQR_MaxHR
#heart_dataset <- subset(heart_dataset, heart_dataset$MaxHR> (Q1_MaxHR - 1.5*IQR_MaxHR) & heart_dataset$MaxHR< (Q3_MaxHR + 1.5*IQR_MaxHR))
heart_dataset$Outlier <- (heart_dataset$MaxHR < (Q1_MaxHR - 1.5*IQR_MaxHR) | heart_dataset$MaxHR > (Q3_MaxHR + 1.5*IQR_MaxHR))
avg = mean(heart_dataset$MaxHR[!heart_dataset$Outlier])
heart_dataset$MaxHR[heart_dataset$Outlier] = avg
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
```{r}
heart_dataset <- read.csv("heart.csv", stringsAsFactors = FALSE,header = TRUE)
heart_dataset
View(heart_dataset)
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
```{r}
Q1_MaxHR <- quantile(heart_dataset$MaxHR, .25)
Q3_MaxHR <- quantile(heart_dataset$MaxHR, .75)
IQR_MaxHR <- IQR(heart_dataset$MaxHR)
IQR_MaxHR
#heart_dataset <- subset(heart_dataset, heart_dataset$MaxHR> (Q1_MaxHR - 1.5*IQR_MaxHR) & heart_dataset$MaxHR< (Q3_MaxHR + 1.5*IQR_MaxHR))
heart_dataset$Outlier <- (heart_dataset$MaxHR < (Q1_MaxHR - 1.5*IQR_MaxHR) | heart_dataset$MaxHR > (Q3_MaxHR + 1.5*IQR_MaxHR))
avg = mean(heart_dataset$MaxHR[!heart_dataset$Outlier])
heart_dataset$MaxHR[heart_dataset$Outlier] = avg
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
boxplot(heart_dataset$Age,horizontal = TRUE)
boxplot(heart_dataset$RestingBP,horizontal = TRUE)
boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
boxplot(heart_dataset$MaxHR,horizontal = TRUE)
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
```{r}
nrow(heart_dataset)
Q1_Cholesterol <- quantile(heart_dataset$Cholesterol, .25)
Q3_Cholesterol <- quantile(heart_dataset$Cholesterol, .75)
IQR_Cholesterol <- IQR(heart_dataset$Cholesterol)
IQR_Cholesterol
#heart_dataset$Outlier1 <- (heart_dataset$Cholesterol < (Q1_Cholesterol - 1.5*IQR_Cholesterol) | heart_dataset$Cholesterol > (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#avg1 = mean(heart_dataset$Cholesterol[!heart_dataset$Outlier1])
#heart_dataset$Cholesterol[heart_dataset$Outlier1] = avg1
heart_dataset <- subset(heart_dataset, heart_dataset$Cholesterol> (Q1_Cholesterol - 1.5*IQR_Cholesterol) & heart_dataset$Cholesterol< (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
nrow(heart_dataset)
nrow(heart_dataset)
Q1_Cholesterol <- quantile(heart_dataset$Cholesterol, .25)
Q3_Cholesterol <- quantile(heart_dataset$Cholesterol, .75)
IQR_Cholesterol <- IQR(heart_dataset$Cholesterol)
IQR_Cholesterol
#heart_dataset$Outlier1 <- (heart_dataset$Cholesterol < (Q1_Cholesterol - 1.5*IQR_Cholesterol) | heart_dataset$Cholesterol > (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#avg1 = mean(heart_dataset$Cholesterol[!heart_dataset$Outlier1])
#heart_dataset$Cholesterol[heart_dataset$Outlier1] = avg1
heart_dataset <- subset(heart_dataset, heart_dataset$Cholesterol> (Q1_Cholesterol - 1.5*IQR_Cholesterol) & heart_dataset$Cholesterol< (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
nrow(heart_dataset)
nrow(heart_dataset)
Q1_Cholesterol <- quantile(heart_dataset$Cholesterol, .25)
Q3_Cholesterol <- quantile(heart_dataset$Cholesterol, .75)
IQR_Cholesterol <- IQR(heart_dataset$Cholesterol)
IQR_Cholesterol
#heart_dataset$Outlier1 <- (heart_dataset$Cholesterol < (Q1_Cholesterol - 1.5*IQR_Cholesterol) | heart_dataset$Cholesterol > (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#avg1 = mean(heart_dataset$Cholesterol[!heart_dataset$Outlier1])
#heart_dataset$Cholesterol[heart_dataset$Outlier1] = avg1
heart_dataset <- subset(heart_dataset, heart_dataset$Cholesterol> (Q1_Cholesterol - 1.5*IQR_Cholesterol) & heart_dataset$Cholesterol< (Q3_Cholesterol + 1.5*IQR_Cholesterol))
#boxplot(heart_dataset$Cholesterol,horizontal = TRUE)
nrow(heart_dataset)
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
#heart_dataset <- subset(heart_dataset, heart_dataset$Oldpeak> (Q1_Oldpeak - 1.5*IQR_Oldpeak) & heart_dataset$Oldpeak< (Q3_Oldpeak + 1.5*IQR_Oldpeak))
heart_dataset$Outlier <- (heart_dataset$Oldpeak < (Q1_Oldpeak - 1.5*IQR_Oldpeak) | heart_dataset$Oldpeak > (Q3_Oldpeak + 1.5*IQR_Oldpeak))
avg = mean(heart_dataset$Oldpeak[!heart_dataset$Outlier])
heart_dataset$Oldpeak[heart_dataset$Outlier] = avg
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
nrow(heart_dataset)
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
heart_dataset$Outlier <- (heart_dataset$Oldpeak < (Q1_Oldpeak - 1.5*IQR_Oldpeak) | heart_dataset$Oldpeak > (Q3_Oldpeak + 1.5*IQR_Oldpeak))
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
heart_dataset$Outlier <- (heart_dataset$Oldpeak < (Q1_Oldpeak - 1.5*IQR_Oldpeak) | heart_dataset$Oldpeak > (Q3_Oldpeak + 1.5*IQR_Oldpeak))
avg = mean(heart_dataset$Oldpeak[!heart_dataset$Outlier])
heart_dataset$Oldpeak[heart_dataset$Outlier] = avg
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
nrow(heart_dataset)
Q1_Oldpeak <- quantile(heart_dataset$Oldpeak, .25)
Q3_Oldpeak <- quantile(heart_dataset$Oldpeak, .75)
IQR_Oldpeak <- IQR(heart_dataset$Oldpeak)
IQR_Oldpeak
boxplot(heart_dataset$Oldpeak,horizontal = TRUE)
nrow(heart_dataset)
